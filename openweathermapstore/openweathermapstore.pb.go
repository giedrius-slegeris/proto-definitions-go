// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: protos/openweathermapstore.proto

package openweathermapstore

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetWeatherDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetWeatherDataRequest) Reset() {
	*x = GetWeatherDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_openweathermapstore_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWeatherDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWeatherDataRequest) ProtoMessage() {}

func (x *GetWeatherDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_openweathermapstore_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWeatherDataRequest.ProtoReflect.Descriptor instead.
func (*GetWeatherDataRequest) Descriptor() ([]byte, []int) {
	return file_protos_openweathermapstore_proto_rawDescGZIP(), []int{0}
}

type Weather struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          int32  `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Main        string `protobuf:"bytes,2,opt,name=Main,json=main,proto3" json:"Main,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=Description,json=description,proto3" json:"Description,omitempty"`
	Icon        string `protobuf:"bytes,4,opt,name=Icon,json=icon,proto3" json:"Icon,omitempty"`
}

func (x *Weather) Reset() {
	*x = Weather{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_openweathermapstore_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Weather) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Weather) ProtoMessage() {}

func (x *Weather) ProtoReflect() protoreflect.Message {
	mi := &file_protos_openweathermapstore_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Weather.ProtoReflect.Descriptor instead.
func (*Weather) Descriptor() ([]byte, []int) {
	return file_protos_openweathermapstore_proto_rawDescGZIP(), []int{1}
}

func (x *Weather) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Weather) GetMain() string {
	if x != nil {
		return x.Main
	}
	return ""
}

func (x *Weather) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Weather) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

type Current struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dt         int32      `protobuf:"varint,1,opt,name=Dt,json=dt,proto3" json:"Dt,omitempty"`
	Sunrise    int32      `protobuf:"varint,2,opt,name=Sunrise,json=sunrise,proto3" json:"Sunrise,omitempty"`
	Sunset     int32      `protobuf:"varint,3,opt,name=Sunset,json=sunset,proto3" json:"Sunset,omitempty"`
	Temp       float32    `protobuf:"fixed32,4,opt,name=Temp,json=temp,proto3" json:"Temp,omitempty"`
	FeelsLike  float32    `protobuf:"fixed32,5,opt,name=FeelsLike,json=feels_like,proto3" json:"FeelsLike,omitempty"`
	Pressure   int32      `protobuf:"varint,6,opt,name=Pressure,json=pressure,proto3" json:"Pressure,omitempty"`
	Humidity   int32      `protobuf:"varint,7,opt,name=Humidity,json=humidity,proto3" json:"Humidity,omitempty"`
	DewPoint   float32    `protobuf:"fixed32,8,opt,name=DewPoint,json=dew_point,proto3" json:"DewPoint,omitempty"`
	Uvi        float32    `protobuf:"fixed32,9,opt,name=Uvi,json=uvi,proto3" json:"Uvi,omitempty"`
	Clouds     int32      `protobuf:"varint,10,opt,name=Clouds,json=clouds,proto3" json:"Clouds,omitempty"`
	Visibility int32      `protobuf:"varint,11,opt,name=Visibility,json=visibility,proto3" json:"Visibility,omitempty"`
	WindSpeed  float32    `protobuf:"fixed32,12,opt,name=WindSpeed,json=wind_speed,proto3" json:"WindSpeed,omitempty"`
	WindDeg    int32      `protobuf:"varint,13,opt,name=WindDeg,json=wind_deg,proto3" json:"WindDeg,omitempty"`
	WindGust   float32    `protobuf:"fixed32,14,opt,name=WindGust,json=wind_gust,proto3" json:"WindGust,omitempty"`
	Weather    []*Weather `protobuf:"bytes,15,rep,name=Weather,json=weather,proto3" json:"Weather,omitempty"`
}

func (x *Current) Reset() {
	*x = Current{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_openweathermapstore_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Current) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Current) ProtoMessage() {}

func (x *Current) ProtoReflect() protoreflect.Message {
	mi := &file_protos_openweathermapstore_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Current.ProtoReflect.Descriptor instead.
func (*Current) Descriptor() ([]byte, []int) {
	return file_protos_openweathermapstore_proto_rawDescGZIP(), []int{2}
}

func (x *Current) GetDt() int32 {
	if x != nil {
		return x.Dt
	}
	return 0
}

func (x *Current) GetSunrise() int32 {
	if x != nil {
		return x.Sunrise
	}
	return 0
}

func (x *Current) GetSunset() int32 {
	if x != nil {
		return x.Sunset
	}
	return 0
}

func (x *Current) GetTemp() float32 {
	if x != nil {
		return x.Temp
	}
	return 0
}

func (x *Current) GetFeelsLike() float32 {
	if x != nil {
		return x.FeelsLike
	}
	return 0
}

func (x *Current) GetPressure() int32 {
	if x != nil {
		return x.Pressure
	}
	return 0
}

func (x *Current) GetHumidity() int32 {
	if x != nil {
		return x.Humidity
	}
	return 0
}

func (x *Current) GetDewPoint() float32 {
	if x != nil {
		return x.DewPoint
	}
	return 0
}

func (x *Current) GetUvi() float32 {
	if x != nil {
		return x.Uvi
	}
	return 0
}

func (x *Current) GetClouds() int32 {
	if x != nil {
		return x.Clouds
	}
	return 0
}

func (x *Current) GetVisibility() int32 {
	if x != nil {
		return x.Visibility
	}
	return 0
}

func (x *Current) GetWindSpeed() float32 {
	if x != nil {
		return x.WindSpeed
	}
	return 0
}

func (x *Current) GetWindDeg() int32 {
	if x != nil {
		return x.WindDeg
	}
	return 0
}

func (x *Current) GetWindGust() float32 {
	if x != nil {
		return x.WindGust
	}
	return 0
}

func (x *Current) GetWeather() []*Weather {
	if x != nil {
		return x.Weather
	}
	return nil
}

type Minutely struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dt            int32   `protobuf:"varint,1,opt,name=Dt,json=dt,proto3" json:"Dt,omitempty"`
	Precipitation float32 `protobuf:"fixed32,2,opt,name=Precipitation,json=precipitation,proto3" json:"Precipitation,omitempty"`
}

func (x *Minutely) Reset() {
	*x = Minutely{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_openweathermapstore_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Minutely) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Minutely) ProtoMessage() {}

func (x *Minutely) ProtoReflect() protoreflect.Message {
	mi := &file_protos_openweathermapstore_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Minutely.ProtoReflect.Descriptor instead.
func (*Minutely) Descriptor() ([]byte, []int) {
	return file_protos_openweathermapstore_proto_rawDescGZIP(), []int{3}
}

func (x *Minutely) GetDt() int32 {
	if x != nil {
		return x.Dt
	}
	return 0
}

func (x *Minutely) GetPrecipitation() float32 {
	if x != nil {
		return x.Precipitation
	}
	return 0
}

type Hourly struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dt         int32      `protobuf:"varint,1,opt,name=Dt,json=dt,proto3" json:"Dt,omitempty"`
	Temp       float32    `protobuf:"fixed32,2,opt,name=Temp,json=temp,proto3" json:"Temp,omitempty"`
	FeelsLike  float32    `protobuf:"fixed32,3,opt,name=FeelsLike,json=feels_like,proto3" json:"FeelsLike,omitempty"`
	Pressure   int32      `protobuf:"varint,4,opt,name=Pressure,json=pressure,proto3" json:"Pressure,omitempty"`
	Humidity   int32      `protobuf:"varint,5,opt,name=Humidity,json=humidity,proto3" json:"Humidity,omitempty"`
	DewPoint   float32    `protobuf:"fixed32,6,opt,name=DewPoint,json=dew_point,proto3" json:"DewPoint,omitempty"`
	Uvi        float32    `protobuf:"fixed32,7,opt,name=Uvi,json=uvi,proto3" json:"Uvi,omitempty"`
	Clouds     int32      `protobuf:"varint,8,opt,name=Clouds,json=clouds,proto3" json:"Clouds,omitempty"`
	Visibility int32      `protobuf:"varint,9,opt,name=Visibility,json=visibility,proto3" json:"Visibility,omitempty"`
	WindSpeed  float32    `protobuf:"fixed32,10,opt,name=WindSpeed,json=wind_speed,proto3" json:"WindSpeed,omitempty"`
	WindDeg    int32      `protobuf:"varint,11,opt,name=WindDeg,json=wind_deg,proto3" json:"WindDeg,omitempty"`
	WindGust   float32    `protobuf:"fixed32,12,opt,name=WindGust,json=wind_gust,proto3" json:"WindGust,omitempty"`
	Weather    []*Weather `protobuf:"bytes,13,rep,name=Weather,json=weather,proto3" json:"Weather,omitempty"`
	Pop        float32    `protobuf:"fixed32,14,opt,name=Pop,json=pop,proto3" json:"Pop,omitempty"`
}

func (x *Hourly) Reset() {
	*x = Hourly{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_openweathermapstore_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hourly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hourly) ProtoMessage() {}

func (x *Hourly) ProtoReflect() protoreflect.Message {
	mi := &file_protos_openweathermapstore_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hourly.ProtoReflect.Descriptor instead.
func (*Hourly) Descriptor() ([]byte, []int) {
	return file_protos_openweathermapstore_proto_rawDescGZIP(), []int{4}
}

func (x *Hourly) GetDt() int32 {
	if x != nil {
		return x.Dt
	}
	return 0
}

func (x *Hourly) GetTemp() float32 {
	if x != nil {
		return x.Temp
	}
	return 0
}

func (x *Hourly) GetFeelsLike() float32 {
	if x != nil {
		return x.FeelsLike
	}
	return 0
}

func (x *Hourly) GetPressure() int32 {
	if x != nil {
		return x.Pressure
	}
	return 0
}

func (x *Hourly) GetHumidity() int32 {
	if x != nil {
		return x.Humidity
	}
	return 0
}

func (x *Hourly) GetDewPoint() float32 {
	if x != nil {
		return x.DewPoint
	}
	return 0
}

func (x *Hourly) GetUvi() float32 {
	if x != nil {
		return x.Uvi
	}
	return 0
}

func (x *Hourly) GetClouds() int32 {
	if x != nil {
		return x.Clouds
	}
	return 0
}

func (x *Hourly) GetVisibility() int32 {
	if x != nil {
		return x.Visibility
	}
	return 0
}

func (x *Hourly) GetWindSpeed() float32 {
	if x != nil {
		return x.WindSpeed
	}
	return 0
}

func (x *Hourly) GetWindDeg() int32 {
	if x != nil {
		return x.WindDeg
	}
	return 0
}

func (x *Hourly) GetWindGust() float32 {
	if x != nil {
		return x.WindGust
	}
	return 0
}

func (x *Hourly) GetWeather() []*Weather {
	if x != nil {
		return x.Weather
	}
	return nil
}

func (x *Hourly) GetPop() float32 {
	if x != nil {
		return x.Pop
	}
	return 0
}

type Daily struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dt        int32      `protobuf:"varint,1,opt,name=Dt,json=dt,proto3" json:"Dt,omitempty"`
	Sunrise   int32      `protobuf:"varint,2,opt,name=Sunrise,json=sunrise,proto3" json:"Sunrise,omitempty"`
	Sunset    int32      `protobuf:"varint,3,opt,name=Sunset,json=sunset,proto3" json:"Sunset,omitempty"`
	Moonrise  int32      `protobuf:"varint,4,opt,name=Moonrise,json=moonrise,proto3" json:"Moonrise,omitempty"`
	Moonset   int32      `protobuf:"varint,5,opt,name=Moonset,json=moonset,proto3" json:"Moonset,omitempty"`
	MoonPhase float32    `protobuf:"fixed32,6,opt,name=MoonPhase,json=moon_phase,proto3" json:"MoonPhase,omitempty"`
	Temp      *Temp      `protobuf:"bytes,7,opt,name=Temp,json=temp,proto3" json:"Temp,omitempty"`
	FeelsLike *FeelsLike `protobuf:"bytes,8,opt,name=FeelsLike,json=feels_like,proto3" json:"FeelsLike,omitempty"`
	Pressure  int32      `protobuf:"varint,9,opt,name=Pressure,json=pressure,proto3" json:"Pressure,omitempty"`
	Humidity  int32      `protobuf:"varint,10,opt,name=Humidity,json=humidity,proto3" json:"Humidity,omitempty"`
	DewPoint  float32    `protobuf:"fixed32,11,opt,name=DewPoint,json=dew_point,proto3" json:"DewPoint,omitempty"`
	WindSpeed float32    `protobuf:"fixed32,12,opt,name=WindSpeed,json=wind_speed,proto3" json:"WindSpeed,omitempty"`
	WindDeg   int32      `protobuf:"varint,13,opt,name=WindDeg,json=wind_deg,proto3" json:"WindDeg,omitempty"`
	WindGust  float32    `protobuf:"fixed32,14,opt,name=WindGust,json=wind_gust,proto3" json:"WindGust,omitempty"`
	Weather   []*Weather `protobuf:"bytes,15,rep,name=Weather,json=weather,proto3" json:"Weather,omitempty"`
	Clouds    int32      `protobuf:"varint,16,opt,name=Clouds,json=clouds,proto3" json:"Clouds,omitempty"`
	Pop       float32    `protobuf:"fixed32,17,opt,name=Pop,json=pop,proto3" json:"Pop,omitempty"`
	Rain      float32    `protobuf:"fixed32,18,opt,name=Rain,json=rain,proto3" json:"Rain,omitempty"`
	Uvi       float32    `protobuf:"fixed32,19,opt,name=Uvi,json=uvi,proto3" json:"Uvi,omitempty"`
}

func (x *Daily) Reset() {
	*x = Daily{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_openweathermapstore_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Daily) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Daily) ProtoMessage() {}

func (x *Daily) ProtoReflect() protoreflect.Message {
	mi := &file_protos_openweathermapstore_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Daily.ProtoReflect.Descriptor instead.
func (*Daily) Descriptor() ([]byte, []int) {
	return file_protos_openweathermapstore_proto_rawDescGZIP(), []int{5}
}

func (x *Daily) GetDt() int32 {
	if x != nil {
		return x.Dt
	}
	return 0
}

func (x *Daily) GetSunrise() int32 {
	if x != nil {
		return x.Sunrise
	}
	return 0
}

func (x *Daily) GetSunset() int32 {
	if x != nil {
		return x.Sunset
	}
	return 0
}

func (x *Daily) GetMoonrise() int32 {
	if x != nil {
		return x.Moonrise
	}
	return 0
}

func (x *Daily) GetMoonset() int32 {
	if x != nil {
		return x.Moonset
	}
	return 0
}

func (x *Daily) GetMoonPhase() float32 {
	if x != nil {
		return x.MoonPhase
	}
	return 0
}

func (x *Daily) GetTemp() *Temp {
	if x != nil {
		return x.Temp
	}
	return nil
}

func (x *Daily) GetFeelsLike() *FeelsLike {
	if x != nil {
		return x.FeelsLike
	}
	return nil
}

func (x *Daily) GetPressure() int32 {
	if x != nil {
		return x.Pressure
	}
	return 0
}

func (x *Daily) GetHumidity() int32 {
	if x != nil {
		return x.Humidity
	}
	return 0
}

func (x *Daily) GetDewPoint() float32 {
	if x != nil {
		return x.DewPoint
	}
	return 0
}

func (x *Daily) GetWindSpeed() float32 {
	if x != nil {
		return x.WindSpeed
	}
	return 0
}

func (x *Daily) GetWindDeg() int32 {
	if x != nil {
		return x.WindDeg
	}
	return 0
}

func (x *Daily) GetWindGust() float32 {
	if x != nil {
		return x.WindGust
	}
	return 0
}

func (x *Daily) GetWeather() []*Weather {
	if x != nil {
		return x.Weather
	}
	return nil
}

func (x *Daily) GetClouds() int32 {
	if x != nil {
		return x.Clouds
	}
	return 0
}

func (x *Daily) GetPop() float32 {
	if x != nil {
		return x.Pop
	}
	return 0
}

func (x *Daily) GetRain() float32 {
	if x != nil {
		return x.Rain
	}
	return 0
}

func (x *Daily) GetUvi() float32 {
	if x != nil {
		return x.Uvi
	}
	return 0
}

type Temp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day   float32 `protobuf:"fixed32,1,opt,name=Day,json=day,proto3" json:"Day,omitempty"`
	Min   float32 `protobuf:"fixed32,2,opt,name=Min,json=min,proto3" json:"Min,omitempty"`
	Max   float32 `protobuf:"fixed32,3,opt,name=Max,json=max,proto3" json:"Max,omitempty"`
	Night float32 `protobuf:"fixed32,4,opt,name=Night,json=night,proto3" json:"Night,omitempty"`
	Eve   float32 `protobuf:"fixed32,5,opt,name=Eve,json=eve,proto3" json:"Eve,omitempty"`
	Morn  float32 `protobuf:"fixed32,6,opt,name=Morn,json=morn,proto3" json:"Morn,omitempty"`
}

func (x *Temp) Reset() {
	*x = Temp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_openweathermapstore_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Temp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Temp) ProtoMessage() {}

func (x *Temp) ProtoReflect() protoreflect.Message {
	mi := &file_protos_openweathermapstore_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Temp.ProtoReflect.Descriptor instead.
func (*Temp) Descriptor() ([]byte, []int) {
	return file_protos_openweathermapstore_proto_rawDescGZIP(), []int{6}
}

func (x *Temp) GetDay() float32 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *Temp) GetMin() float32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *Temp) GetMax() float32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *Temp) GetNight() float32 {
	if x != nil {
		return x.Night
	}
	return 0
}

func (x *Temp) GetEve() float32 {
	if x != nil {
		return x.Eve
	}
	return 0
}

func (x *Temp) GetMorn() float32 {
	if x != nil {
		return x.Morn
	}
	return 0
}

type FeelsLike struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day   float32 `protobuf:"fixed32,1,opt,name=Day,json=day,proto3" json:"Day,omitempty"`
	Night float32 `protobuf:"fixed32,2,opt,name=Night,json=night,proto3" json:"Night,omitempty"`
	Eve   float32 `protobuf:"fixed32,3,opt,name=Eve,json=eve,proto3" json:"Eve,omitempty"`
	Morn  float32 `protobuf:"fixed32,4,opt,name=Morn,json=morn,proto3" json:"Morn,omitempty"`
}

func (x *FeelsLike) Reset() {
	*x = FeelsLike{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_openweathermapstore_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeelsLike) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeelsLike) ProtoMessage() {}

func (x *FeelsLike) ProtoReflect() protoreflect.Message {
	mi := &file_protos_openweathermapstore_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeelsLike.ProtoReflect.Descriptor instead.
func (*FeelsLike) Descriptor() ([]byte, []int) {
	return file_protos_openweathermapstore_proto_rawDescGZIP(), []int{7}
}

func (x *FeelsLike) GetDay() float32 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *FeelsLike) GetNight() float32 {
	if x != nil {
		return x.Night
	}
	return 0
}

func (x *FeelsLike) GetEve() float32 {
	if x != nil {
		return x.Eve
	}
	return 0
}

func (x *FeelsLike) GetMorn() float32 {
	if x != nil {
		return x.Morn
	}
	return 0
}

type Alert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderName  string   `protobuf:"bytes,1,opt,name=SenderName,json=sender_name,proto3" json:"SenderName,omitempty"`
	Event       string   `protobuf:"bytes,2,opt,name=Event,json=event,proto3" json:"Event,omitempty"`
	Start       int64    `protobuf:"varint,3,opt,name=Start,json=start,proto3" json:"Start,omitempty"`
	End         int64    `protobuf:"varint,4,opt,name=End,json=end,proto3" json:"End,omitempty"`
	Description string   `protobuf:"bytes,5,opt,name=Description,json=description,proto3" json:"Description,omitempty"`
	Tags        []string `protobuf:"bytes,6,rep,name=Tags,json=tags,proto3" json:"Tags,omitempty"`
}

func (x *Alert) Reset() {
	*x = Alert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_openweathermapstore_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alert) ProtoMessage() {}

func (x *Alert) ProtoReflect() protoreflect.Message {
	mi := &file_protos_openweathermapstore_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alert.ProtoReflect.Descriptor instead.
func (*Alert) Descriptor() ([]byte, []int) {
	return file_protos_openweathermapstore_proto_rawDescGZIP(), []int{8}
}

func (x *Alert) GetSenderName() string {
	if x != nil {
		return x.SenderName
	}
	return ""
}

func (x *Alert) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *Alert) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Alert) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *Alert) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Alert) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type GetWeatherDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastUpdated    int64       `protobuf:"varint,1,opt,name=LastUpdated,proto3" json:"LastUpdated,omitempty"`
	Lat            float32     `protobuf:"fixed32,2,opt,name=Lat,json=lat,proto3" json:"Lat,omitempty"`
	Lon            float32     `protobuf:"fixed32,3,opt,name=Lon,json=lon,proto3" json:"Lon,omitempty"`
	Timezone       string      `protobuf:"bytes,4,opt,name=Timezone,json=timezone,proto3" json:"Timezone,omitempty"`
	TimezoneOffset int32       `protobuf:"varint,5,opt,name=TimezoneOffset,json=timezone_offset,proto3" json:"TimezoneOffset,omitempty"`
	Current        *Current    `protobuf:"bytes,6,opt,name=Current,json=current,proto3" json:"Current,omitempty"`
	Minutely       []*Minutely `protobuf:"bytes,7,rep,name=Minutely,json=minutely,proto3" json:"Minutely,omitempty"`
	Hourly         []*Hourly   `protobuf:"bytes,8,rep,name=Hourly,json=hourly,proto3" json:"Hourly,omitempty"`
	Daily          []*Daily    `protobuf:"bytes,9,rep,name=Daily,json=daily,proto3" json:"Daily,omitempty"`
	Alerts         []*Alert    `protobuf:"bytes,10,rep,name=Alerts,json=alerts,proto3" json:"Alerts,omitempty"`
}

func (x *GetWeatherDataResponse) Reset() {
	*x = GetWeatherDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_openweathermapstore_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWeatherDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWeatherDataResponse) ProtoMessage() {}

func (x *GetWeatherDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_openweathermapstore_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWeatherDataResponse.ProtoReflect.Descriptor instead.
func (*GetWeatherDataResponse) Descriptor() ([]byte, []int) {
	return file_protos_openweathermapstore_proto_rawDescGZIP(), []int{9}
}

func (x *GetWeatherDataResponse) GetLastUpdated() int64 {
	if x != nil {
		return x.LastUpdated
	}
	return 0
}

func (x *GetWeatherDataResponse) GetLat() float32 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *GetWeatherDataResponse) GetLon() float32 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *GetWeatherDataResponse) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *GetWeatherDataResponse) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *GetWeatherDataResponse) GetCurrent() *Current {
	if x != nil {
		return x.Current
	}
	return nil
}

func (x *GetWeatherDataResponse) GetMinutely() []*Minutely {
	if x != nil {
		return x.Minutely
	}
	return nil
}

func (x *GetWeatherDataResponse) GetHourly() []*Hourly {
	if x != nil {
		return x.Hourly
	}
	return nil
}

func (x *GetWeatherDataResponse) GetDaily() []*Daily {
	if x != nil {
		return x.Daily
	}
	return nil
}

func (x *GetWeatherDataResponse) GetAlerts() []*Alert {
	if x != nil {
		return x.Alerts
	}
	return nil
}

var File_protos_openweathermapstore_proto protoreflect.FileDescriptor

var file_protos_openweathermapstore_proto_rawDesc = []byte{
	0x0a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x77, 0x65, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x13, 0x6f, 0x70, 0x65, 0x6e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x6d,
	0x61, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x57, 0x65,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x63, 0x0a, 0x07, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4d,
	0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0xac, 0x03, 0x0a, 0x07, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x44, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x64,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x73, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x75, 0x6e, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x75, 0x6e,
	0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x09, 0x46, 0x65, 0x65, 0x6c, 0x73,
	0x4c, 0x69, 0x6b, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x6c,
	0x73, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75,
	0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75,
	0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x1b,
	0x0a, 0x08, 0x44, 0x65, 0x77, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x64, 0x65, 0x77, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x55,
	0x76, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x75, 0x76, 0x69, 0x12, 0x16, 0x0a,
	0x06, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x09, 0x57, 0x69, 0x6e, 0x64, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x07, 0x57, 0x69, 0x6e, 0x64, 0x44, 0x65, 0x67, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x67, 0x12,
	0x1b, 0x0a, 0x08, 0x57, 0x69, 0x6e, 0x64, 0x47, 0x75, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x67, 0x75, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x07,
	0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x70, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x07, 0x77, 0x65, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x22, 0x40, 0x0a, 0x08, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x6c, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x44, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x64, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8b, 0x03, 0x0a, 0x06, 0x48, 0x6f, 0x75, 0x72, 0x6c,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x44, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x64,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x04, 0x74, 0x65, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x09, 0x46, 0x65, 0x65, 0x6c, 0x73, 0x4c, 0x69,
	0x6b, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x6c, 0x73, 0x5f,
	0x6c, 0x69, 0x6b, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x48, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x08,
	0x44, 0x65, 0x77, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x64, 0x65, 0x77, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x76, 0x69,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x75, 0x76, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x09, 0x57, 0x69, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x12, 0x19, 0x0a, 0x07, 0x57, 0x69, 0x6e, 0x64, 0x44, 0x65, 0x67, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x67, 0x12, 0x1b, 0x0a,
	0x08, 0x57, 0x69, 0x6e, 0x64, 0x47, 0x75, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x09, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x67, 0x75, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x57, 0x65,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x70, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x07, 0x77, 0x65, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x6f, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x70, 0x6f, 0x70, 0x22, 0xc0, 0x04, 0x0a, 0x05, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x12, 0x0e,
	0x0a, 0x02, 0x44, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x64, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x53, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x73, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x75, 0x6e, 0x73,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x75, 0x6e, 0x73, 0x65, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x6f, 0x6f, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6d, 0x6f, 0x6f, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x4d, 0x6f, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d,
	0x6f, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x4d, 0x6f, 0x6f, 0x6e, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6d, 0x6f, 0x6f, 0x6e, 0x5f,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x54, 0x65, 0x6d, 0x70, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x6d, 0x61, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x52, 0x04,
	0x74, 0x65, 0x6d, 0x70, 0x12, 0x3d, 0x0a, 0x09, 0x46, 0x65, 0x65, 0x6c, 0x73, 0x4c, 0x69, 0x6b,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x77, 0x65,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x65,
	0x65, 0x6c, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x6c, 0x73, 0x5f, 0x6c,
	0x69, 0x6b, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x48, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x08, 0x44,
	0x65, 0x77, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x64,
	0x65, 0x77, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x57, 0x69, 0x6e, 0x64,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x77, 0x69, 0x6e,
	0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x07, 0x57, 0x69, 0x6e, 0x64, 0x44,
	0x65, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x64,
	0x65, 0x67, 0x12, 0x1b, 0x0a, 0x08, 0x57, 0x69, 0x6e, 0x64, 0x47, 0x75, 0x73, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x67, 0x75, 0x73, 0x74, 0x12,
	0x36, 0x0a, 0x07, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61,
	0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x07,
	0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x50, 0x6f, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x70, 0x6f,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x61, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x04, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x76, 0x69, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x03, 0x75, 0x76, 0x69, 0x22, 0x78, 0x0a, 0x04, 0x54, 0x65, 0x6d, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x44, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x64, 0x61,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03,
	0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x45,
	0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x65, 0x76, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x4d, 0x6f, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6d, 0x6f, 0x72,
	0x6e, 0x22, 0x59, 0x0a, 0x09, 0x46, 0x65, 0x65, 0x6c, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x44, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x64, 0x61, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x76, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x65, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x72, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6d, 0x6f, 0x72, 0x6e, 0x22, 0x9c, 0x01, 0x0a,
	0x05, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xb1, 0x03, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x54, 0x69, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x36, 0x0a, 0x07, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x6d, 0x61, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x4d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x70, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x6c, 0x79, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x6c, 0x79, 0x12, 0x33, 0x0a, 0x06, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x77, 0x65, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x6d, 0x61, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x6f, 0x75, 0x72, 0x6c,
	0x79, 0x52, 0x06, 0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x77,
	0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x52, 0x05, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x12, 0x32, 0x0a, 0x06, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x70, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x32,
	0x86, 0x01, 0x0a, 0x19, 0x4f, 0x70, 0x65, 0x6e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x69, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x70,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x70, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x65, 0x64,
	0x72, 0x69, 0x75, 0x73, 0x2d, 0x73, 0x6c, 0x65, 0x67, 0x65, 0x72, 0x69, 0x73, 0x2f, 0x6f, 0x70,
	0x65, 0x6e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x70, 0x2d, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x3b, 0x6f, 0x70, 0x65, 0x6e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61,
	0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_openweathermapstore_proto_rawDescOnce sync.Once
	file_protos_openweathermapstore_proto_rawDescData = file_protos_openweathermapstore_proto_rawDesc
)

func file_protos_openweathermapstore_proto_rawDescGZIP() []byte {
	file_protos_openweathermapstore_proto_rawDescOnce.Do(func() {
		file_protos_openweathermapstore_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_openweathermapstore_proto_rawDescData)
	})
	return file_protos_openweathermapstore_proto_rawDescData
}

var file_protos_openweathermapstore_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_protos_openweathermapstore_proto_goTypes = []any{
	(*GetWeatherDataRequest)(nil),  // 0: openweathermapstore.GetWeatherDataRequest
	(*Weather)(nil),                // 1: openweathermapstore.Weather
	(*Current)(nil),                // 2: openweathermapstore.Current
	(*Minutely)(nil),               // 3: openweathermapstore.Minutely
	(*Hourly)(nil),                 // 4: openweathermapstore.Hourly
	(*Daily)(nil),                  // 5: openweathermapstore.Daily
	(*Temp)(nil),                   // 6: openweathermapstore.Temp
	(*FeelsLike)(nil),              // 7: openweathermapstore.FeelsLike
	(*Alert)(nil),                  // 8: openweathermapstore.Alert
	(*GetWeatherDataResponse)(nil), // 9: openweathermapstore.GetWeatherDataResponse
}
var file_protos_openweathermapstore_proto_depIdxs = []int32{
	1,  // 0: openweathermapstore.Current.Weather:type_name -> openweathermapstore.Weather
	1,  // 1: openweathermapstore.Hourly.Weather:type_name -> openweathermapstore.Weather
	6,  // 2: openweathermapstore.Daily.Temp:type_name -> openweathermapstore.Temp
	7,  // 3: openweathermapstore.Daily.FeelsLike:type_name -> openweathermapstore.FeelsLike
	1,  // 4: openweathermapstore.Daily.Weather:type_name -> openweathermapstore.Weather
	2,  // 5: openweathermapstore.GetWeatherDataResponse.Current:type_name -> openweathermapstore.Current
	3,  // 6: openweathermapstore.GetWeatherDataResponse.Minutely:type_name -> openweathermapstore.Minutely
	4,  // 7: openweathermapstore.GetWeatherDataResponse.Hourly:type_name -> openweathermapstore.Hourly
	5,  // 8: openweathermapstore.GetWeatherDataResponse.Daily:type_name -> openweathermapstore.Daily
	8,  // 9: openweathermapstore.GetWeatherDataResponse.Alerts:type_name -> openweathermapstore.Alert
	0,  // 10: openweathermapstore.OpenWeatherMapStoreServer.GetWeatherData:input_type -> openweathermapstore.GetWeatherDataRequest
	9,  // 11: openweathermapstore.OpenWeatherMapStoreServer.GetWeatherData:output_type -> openweathermapstore.GetWeatherDataResponse
	11, // [11:12] is the sub-list for method output_type
	10, // [10:11] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_protos_openweathermapstore_proto_init() }
func file_protos_openweathermapstore_proto_init() {
	if File_protos_openweathermapstore_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_openweathermapstore_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GetWeatherDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_openweathermapstore_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Weather); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_openweathermapstore_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Current); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_openweathermapstore_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Minutely); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_openweathermapstore_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Hourly); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_openweathermapstore_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Daily); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_openweathermapstore_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Temp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_openweathermapstore_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*FeelsLike); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_openweathermapstore_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Alert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_openweathermapstore_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GetWeatherDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_openweathermapstore_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protos_openweathermapstore_proto_goTypes,
		DependencyIndexes: file_protos_openweathermapstore_proto_depIdxs,
		MessageInfos:      file_protos_openweathermapstore_proto_msgTypes,
	}.Build()
	File_protos_openweathermapstore_proto = out.File
	file_protos_openweathermapstore_proto_rawDesc = nil
	file_protos_openweathermapstore_proto_goTypes = nil
	file_protos_openweathermapstore_proto_depIdxs = nil
}
